
import akka.actor.{ Actor,ActorRef, FSM }
import scala.concurrent.duration._
import akka.actor.Props
import scala.collection.mutable.Map
import akka.http.scaladsl.model.StatusCodes


case class ClientRequest(id: String)

class ClientFsm

class ClientActor extends Actor {
  def receive = {
    case _ => sender ! StatusCodes.OK
  }
}
class ClientManagerActor extends Actor {
  def receive ={
    case msg: ClientRequest => getClientActor(msg.id) forward msg
   // case ClientRequest(clientId) => sender ! StatusCodes.ServiceUnavailable
   // case   ClientRequest(clientId) => getClientActor(clientId) ! new ClientRequest(clientId) 
  }
  
  private val actorCollection = Map[String, ActorRef]()
  def getClientActor(clientId: String): ActorRef =
     actorCollection.getOrElseUpdate(clientId , createClientActor(clientId))
     
     def createClientActor(clientId: String) : ActorRef = 
       context.actorOf(Props[ClientActor])  
}